{"version":3,"sources":["components/HomeImage/HomeImage.js","components/NavBar/NavBar.js","apiCalls/apiCalls.js","components/PicturesContainer/PicturesContainer.js","actions/getDataAction.js","components/Form/Form.js","actions/index.js","components/App/App.js","serviceWorker.js","reducers/updateInput.js","reducers/dataReducer.js","reducers/index.js","reducers/isFormVisible.js","app/store.js","index.js"],"names":["HomeImage","props","pictureOfTheDay","className","title","moment","date","format","media_type","id","src","url","alt","controls","width","height","config","youtube","playerVars","showinfo","explanation","NavBar","onClick","toggleForm","require","getPictureOfTheDay","a","apiRoot","process","fetch","response","json","console","log","getPicturesOfTheWeek","startDate","endDate","connect","selectCurrentImage","currentImage","dispatch","type","payload","updateMainImage","event","image","previousDays","find","element","target","window","scrollTo","top","left","behavior","length","map","entry","index","state","updateInput","updateInputField","fetchPictureByDate","Date","now","isSaved","submitDate","preventDefault","isFormVisible","onSubmit","min","max","today","name","placeholder","onChange","App","componentDidMount","fetchPictureOfTheDay","fetchPreviousPictures","this","previousPictures","Component","data","startingDate","subtract","lastWeekPictures","forEach","i","Boolean","location","hostname","match","INITIAL_STATE","allReducers","combineReducers","action","value","middleware","thunk","store","createStore","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6f8ef5a.chunk.js","sourcesContent":["import React from 'react'\nimport './HomeImage.css'\nimport moment from 'moment'\nimport ReactPlayer from 'react-player'\nexport const HomeImage = (props) => {\n    const { pictureOfTheDay } = props\n\n    return (\n        <div className='container'>\n            <h1 className=\"picture-title\">{pictureOfTheDay.title}</h1>\n            <div className=\"date-container\">\n                <h3 className=\"date-title\">taken on</h3>\n                <p className=\"date-title\">{moment(pictureOfTheDay.date).format('LLL')}</p>\n            </div>\n            {pictureOfTheDay.media_type === 'image' ? <img\n                  id={pictureOfTheDay.id}\n                  src={pictureOfTheDay.url}\n                  alt={pictureOfTheDay.title}\n                  className='todays-image'\n                  /> : \n                  <ReactPlayer\n                  url={pictureOfTheDay.url}\n                  alt={pictureOfTheDay.title}\n                  controls={true}\n                  width={550}\n                  height={450}\n                  config={{\n                    youtube: {\n                      playerVars: { showinfo: 1 }\n                    }\n                  }}\n                />}\n              <div className=\"description-container\">\n                  <h2 className=\"description-title\">description</h2>\n                  <p className=\"description\">{pictureOfTheDay.explanation}</p>\n              </div>\n\n        </div>\n    )\n}\n","import React from 'react'\nimport './NavBar.css'\n\nexport const NavBar = (props) => {\n\n    return (\n        <nav className='nav-container'>\n          <h1 className=\"app-title\">NASA Pik of the day</h1>\n          <div className=\"link-container\">\n              <ul className=\"link-list\">\n                  <li className=\"link\">About</li>\n                  <li className=\"link\">Favorites</li>\n              </ul>\n          </div>\n          <button \n            onClick={() => props.toggleForm()}\n            className='find-button'\n            >\n            find\n            </button>\n          \n        </nav>\n    )\n}\n\n","require('dotenv').config(); \n\nexport const getPictureOfTheDay = async(date) => {\n    try{\n        let apiRoot = `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&date=${date}&hd=true`\n        const response = await fetch(apiRoot)\n        return await response.json()\n    } catch(error) {\n        console.log(error)\n        return await error\n    }\n}\n\nexport const getPicturesOfTheWeek = async(startDate, endDate) => {\n    try{\n        let apiRoot = `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&start_date=${startDate}&end_date=${endDate}`\n        const response = await fetch(apiRoot)\n        return await response.json()\n    } catch(error) {\n        console.log(error)\n        return error\n    }\n}\n\n\n\n","import React, { Component } from 'react';\nimport moment from 'moment';\nimport './PicturesContainer.css';\nimport { selectCurrentImage } from '../../actions/getDataAction'\nimport { connect } from 'react-redux';\nimport ReactPlayer from 'react-player' \n\nconst PicturesContainer = (props) => {\n\n    const updateMainImage = (event) => {\n      const image = props.previousDays.find(element =>element.id === +event.target.id)\n      props.selectCurrentImage(image)\n      window.scrollTo({\n        top: 100,\n        left: 100,\n        behavior: 'smooth'\n      });\n    }\n\n    const injectData = () => {\n        if(props.previousDays.length === 0) {\n          return(\n              <h1 className='loading'>Loading...</h1>\n              )\n        }\n          return props.previousDays.map((entry, index) => {\n            return (\n                <div \n                  id={entry.id}\n                  onClick={(event)=> updateMainImage(event)}\n                  className=\"single-container\"\n                  key={index}\n                  >\n                {entry.media_type === 'image' ? <img\n                  id={entry.id}\n                  onClick={(event)=> updateMainImage(event)}\n                  src={entry.url}\n                  alt={entry.title}\n                  className='image'\n                  /> : \n                  <ReactPlayer\n                  url={entry.url}\n                  alt={entry.title}\n                  controls={true}\n                  width={350}\n                  height={250}\n                  config={{\n                    youtube: {\n                      playerVars: { showinfo: 1 }\n                    }\n                  }}\n                />}\n                  <div className=\"info-container\">\n                    <p className=\"image-title\">{entry.title}</p>\n                    <p className=\"date\">{moment(entry.date).format('LLL')}</p>\n\n                  </div>\n                </div>\n            )\n          });\n        }\n\n    return (\n        <div className='pictures-container'>\n            <div className=\"title-container\">\n                <h1 className=\"pics-title\">Previous Days</h1>\n            </div>\n            <div className=\"all-images\">{injectData()}</div>\n        </div>\n    )\n};\n\n\n// const mapDispatchToProps = dispatch => ({\n//   selectCurrentImage: currentImage => dispatch(selectCurrentImage(currentImage))\n// })\n\nexport default connect(null, { selectCurrentImage } )(PicturesContainer)\n","import { getPictureOfTheDay, getPicturesOfTheWeek } from '../apiCalls/apiCalls';\nimport moment from 'moment'\n\nexport const fetchPictureOfTheDay = () => async dispatch => {\n    const today = moment().format('YYYY-MM-DD')\n    try{\n        const pictureOfTheDay = await getPictureOfTheDay(today)\n        pictureOfTheDay.id = Date.now()\n        pictureOfTheDay.isSaved =  false\n        return dispatch({\n            type: 'FETCH_PICTURE_OF_THE_DAY',\n            payload: pictureOfTheDay\n        })\n    } catch(error){\n        console.log(error)\n    }\n}\n\nexport const fetchPreviousPictures = () => async dispatch => {\n    const today = moment().format('YYYY-MM-DD');\n    const startingDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n    try{\n      const lastWeekPictures = await getPicturesOfTheWeek(startingDate, today);\n     lastWeekPictures.forEach((entry, i) => {\n          entry.id = i\n          entry.isSaved = false\n          return entry\n      })\n      return dispatch({\n          type: 'FETCH_LAST_WEEKS_PICTURES',\n          payload: lastWeekPictures\n      })\n    }catch(error){\n      console.log(error)\n    }\n}\n\nexport const selectCurrentImage = (currentImage) => dispatch => {\n    return dispatch({\n        type: 'SELECT_CURRENT_IMAGE',\n        payload: currentImage\n    })\n}\n\nexport const fetchPictureByDate = (date) => async dispatch => {\n    try{\n        const pictureOfTheDay = await getPictureOfTheDay(date)\n        pictureOfTheDay.id = Date.now()\n        pictureOfTheDay.isSaved =  false\n        return dispatch({\n            type: 'FETCH_PICTURE_BY_DATE',\n            payload: pictureOfTheDay\n        });\n    } catch(error){\n        console.log(error)\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPictureByDate } from '../../actions/getDataAction';\nimport { updateInputField } from '../../actions/';\nimport './Form.css';\n\n\nconst Form = (props) => {\n\n    const submitDate = (event) => {\n        event.preventDefault()\n        console.log(props)\n        props.fetchPictureByDate(props.updateInput)\n    }\n        return (\n            <>\n            {props.isFormVisible &&\n            <form \n                onSubmit={(event) => submitDate(event)}\n                className='form-container'>\n              <input \n                min='1995-06-16'\n                max={props.today.format('YYYY-MM-DD')}\n                name='date'\n                type='date' \n                placeholder={props.today.format('YYYY-MM-DD')}\n                onChange={(event) => props.updateInputField(event)}\n                className='date-input'/>\n              <button \n                onClick={(event) => submitDate(event)}\n                className=\"submit-button\">\n                submit\n                </button> \n            </form>\n            }\n            </>\n        )\n    }\n\nconst mapStateToProps = state => ({\n    updateInput:state.updateInput.date\n})\n\nexport default connect(mapStateToProps, { updateInputField, fetchPictureByDate })(Form)","export const toggleForm =  () => dispatch => {\n    return dispatch({\n        type: 'TOGGLE'\n    })\n}\n\nexport const updateInputField = (date) => dispatch => {\n    return dispatch({\n        type: 'UPDATE_INPUT',\n        payload: date\n    })\n}","import {React, Component } from 'react';\r\nimport { HomeImage } from '../HomeImage/HomeImage';\r\nimport { NavBar } from '../NavBar/NavBar'\r\nimport  PicturesContainer from '../PicturesContainer/PicturesContainer';\r\nimport Form from '../Form/Form';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPictureOfTheDay, fetchPreviousPictures } from '../../actions/getDataAction'\r\nimport { updateInput, toggleForm  } from '../../actions';\r\nimport moment from 'moment';\r\nimport './App.css';\r\n\r\nexport class App extends Component {\r\n\r\n  componentDidMount = async() => {\r\n    await this.props.fetchPictureOfTheDay()\r\n    await this.props.fetchPreviousPictures();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n        <div className=\"App\">\r\n\r\n          <NavBar\r\n            toggleForm={this.props.toggleForm}\r\n          />\r\n\r\n          <Form \r\n            isFormVisible={this.props.isFormVisible}\r\n            today={moment()}\r\n\r\n          />\r\n          <HomeImage \r\n              pictureOfTheDay={this.props.pictureOfTheDay}\r\n          />\r\n\r\n          <PicturesContainer \r\n              previousDays={this.props.previousPictures}\r\n          />\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps =  state => ({\r\n  pictureOfTheDay: state.data.pictureOfTheDay,\r\n  previousPictures: state.data.previousPictures,\r\n  isFormVisible: state.isFormVisible\r\n})\r\n\r\nexport default connect(mapStateToProps, \r\n  { \r\n    fetchPictureOfTheDay, \r\n    fetchPreviousPictures,\r\n    toggleForm\r\n  }\r\n  )(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const INITIAL_STATE = {\n    date : ''\n} \n\nexport const updateInputReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n      case 'UPDATE_INPUT':\n        return { ...state, [action.payload.target.name]: action.payload.target.value };\n      default:\n        return state;\n    };\n  };","const INITIAL_STATE = {\n    pictureOfTheDay : {},\n    previousPictures: []\n}\n\nexport const requestDataReducer = (state = INITIAL_STATE, action) => {\n    switch(action.type){\n        case 'FETCH_PICTURE_OF_THE_DAY':\n            return {\n                ...state,\n                pictureOfTheDay: action.payload\n            }\n        case 'FETCH_LAST_WEEKS_PICTURES':\n            return {\n                ...state,\n                previousPictures: action.payload\n            }\n        case 'SELECT_CURRENT_IMAGE':\n            return {\n                ...state,\n                pictureOfTheDay: action.payload\n            }\n        case 'FETCH_PICTURE_BY_DATE':\n            return {\n                ...state,\n                pictureOfTheDay: action.payload\n            }\n        default:\n            return state\n    }\n}","import { isFormVisibleReducer } from './isFormVisible';\nimport { updateInputReducer } from './updateInput';\nimport { requestDataReducer } from './dataReducer'\nimport { combineReducers } from 'redux';\n\nexport const allReducers = combineReducers({\n    isFormVisible: isFormVisibleReducer,\n    updateInput: updateInputReducer,\n    data: requestDataReducer\n})","export const isFormVisibleReducer = (state = false, action) => {\n    switch(action.type){\n        case 'TOGGLE':\n            return !state\n        default:\n            return state\n    }\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { allReducers } from  '../reducers'\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n  allReducers,\r\n  initialState,\r\n  compose(\r\n      applyMiddleware(...middleware),\r\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n      )\r\n  )\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './app/store'\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}